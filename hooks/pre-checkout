#!/usr/bin/env bash

set -eo pipefail
set -Eo functrace

report_error() {
  echo error on line: "$1"
  echo failed command: "$2"
}
trap 'report_error ${LINENO} ${BASH_COMMAND}' ERR

get_indirected_env() {
  local index="$1"
  local env_name="$2"

  env_ref="BUILDKITE_PLUGIN_SMOOTH_SECRETS_SECRETS_${index}_${env_name}"
  echo "${!env_ref}"
}

setup_ssh_agent() {
  if [ -z "${SSH_AGENT_PID}" ]; then
    eval "$(ssh-agent -s)"
  fi
}

SECRETS_DIR="/etc/buildkite-agent/buildkite-secrets/${BUILDKITE_BUILD_ID}/${BUILDKITE_JOB_ID}"
export SECRETS_DIR
mkdir -p "${SECRETS_DIR}"
setup_ssh_agent

i=0
echo "--- :closed_lock_with_key: Setting up secrets"
while true; do
  strategy="$(get_indirected_env "$i" "STRATEGY")"

  if [ -z "$strategy" ]; then
    break
  elif [ "$strategy" != "aws-secrets-manager" ]; then
    echo "Strategy \"${strategy}\" not supported"
    exit 1
  fi

  secret_key="$(get_indirected_env "$i" "KEY")"
  secret_type="$(get_indirected_env "$i" "TYPE")"
  region="$(get_indirected_env "$i" "REGION")"

  echo "Loading secret with key \"${secret_key}\""

  if [ "${secret_type}" != "ssh" ]; then
    echo "Secret type \"${secret_type}\" not supported"
    exit 1
  fi

  echo "Fetching secret from secrets manager"
  ssh_key="$(aws secretsmanager get-secret-value --secret-id ${secret_key} --region ${region} | jq -r '.SecretString' | base64 -d)"
  ssh_key_file="${SECRETS_DIR}"/"${secret_key/\//\-}" # replace "/" in secret_key with "-"
  touch "${ssh_key_file}"
  chmod 0600 "${ssh_key_file}"
  echo "$ssh_key" >> "${ssh_key_file}"

  echo "Adding key to ssh-agent"
  ssh-add "${ssh_key_file}"

  i=$((i+=1))
done
echo "Secrets configured."

ssh-add -l
